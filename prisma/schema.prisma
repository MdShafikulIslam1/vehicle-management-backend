// Prisma schema for Vehicle Management System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enumeration for user roles
enum RoleEnumType {
  ADMIN
  USER
  DRIVER
  SUPER_ADMIN
}

// User model for authentication and authorization
model User {
  id        String       @id @default(uuid())
  name      String
  email     String
  password  String
  phone     String
  avatar    String
  role      RoleEnumType @default(USER)
  address   String
  location  String
  createAt  DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  vehicles VehicleProfile[]
  // drivers     Driver[]     @relation("drivers", fields: [id]) // Updated opposite relation for drivers

  @@map("users")
}

// Vehicle model
model VehicleProfile {
  id                     String   @id @default(uuid())
  vehicle_make           String
  photo                  String
  purchase_date          DateTime
  registeration_date     DateTime
  color                  String
  registeration_validity String
  present_km             String
  mileage                String
  price                  String
  fuel_type              String
  body_type              String
  model_name             String
  registration_no        String
  engine_no              String
  manufacturing_date     String
  cubic_capacity         String
  engine_capacity        String
  sitting_capacity       String
  chassis_no             String
  userId                 String
  user                   User     @relation(fields: [userId], references: [id])

  // year         String
  // price        String
  // vin          String
  // make_Id       String
  // model_Id      String

  // maintenance    Maintenance[]   // One-to-Many relationship with maintenance tasks
  // fuelExpenses   FuelExpense[]   // One-to-Many relationship with fuel expenses
  // serviceRecords ServiceRecord[] // One-to-Many relationship with service records
  // documents      Document[]      // One-to-Many relationship with documents
  // drivers        Driver[]        @relation("vehicles", fields: [id]) // Opposite relation for drivers
  // vendors        Vendor[]        @relation("vehicles", fields: [id]) // Opposite relation for vendors
  // fuelCards      FuelCard[]      @relation("vehicles", fields: [id]) // Opposite relation for fuel cards
  Maintenance Maintenance[]
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("vehicles")
}

// Maintenance task model
model Maintenance {
  id          String         @id @default(uuid())
  task        String
  frequency   String
  expense     String
  lastDone    DateTime
  currentDate DateTime
  nextDue     DateTime
  vehicleId   String
  vehicle     VehicleProfile @relation(fields: [vehicleId], references: [id])

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenances")
}

// Fuel expense model
// model FuelExpense {
//   id         String    @id @default(uuid())
//   amount     Float
//   date       DateTime
//   vehicleId  String
//   vehicle    Vehicle   @relation(fields: [vehicleId], references: [id])
// }

// Service record model
// model ServiceRecord {
//   id         String    @id @default(uuid())
//   description String
//   date       DateTime
//   vehicleId  String
//   vehicle    Vehicle   @relation(fields: [vehicleId], references: [id])
// }

// Document model
// model Document {
//   id         String    @id @default(uuid())
//   name       String
//   url        String
//   vehicleId  String
//   vehicle    Vehicle   @relation(fields: [vehicleId], references: [id])
// }

// Driver model
// model Driver {
//   id         String    @id @default(uuid())
//   name       String
//   vehicles   Vehicle[] @relation("drivers", fields: [id]) // Opposite relation for drivers
// }

// Vendor model
// model Vendor {
//   id         String    @id @default(uuid())
//   name       String
//   vehicles   Vehicle[] @relation("vendors", fields: [id]) // Opposite relation for vendors
// }

// Fuel card model
// model FuelCard {
//   id         String    @id @default(uuid())
//   cardNumber String
//   vehicles   Vehicle[] @relation("fuelCards", fields: [id]) // Opposite relation for fuel cards
// }

// UserPermission model for controlling access levels
// model UserPermission {
//   id         String    @id @default(uuid())
//   userId     String
//   vehicleId  String
//   user       User      @relation(fields: [userId], references: [id])
//   vehicle    Vehicle   @relation(fields: [vehicleId], references: [id])
//   role       RoleEnumType // Fixed type to match User model
// }

// DriverPerformance model for monitoring driver behavior
// model DriverPerformance {
//   id         String    @id @default(uuid())
//   driverId   String
//   vehicleId  String
//   driver     Driver    @relation(fields: [driverId], references: [id])
//   vehicle    Vehicle   @relation(fields: [vehicleId], references: [id])
//   // Add other performance metrics
// }
